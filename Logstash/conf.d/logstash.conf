input {
  tcp {
    port => 5000
    type => syslog
    host => "0.0.0.0"
  }
  udp {
    port => 5000
    type => syslog
    host => "0.0.0.0"
  }
  beats {
    port => 5044
    type => beats
    host => "0.0.0.0"
  }
  tcp {
    port => 5001
    type => esx_syslog
    host => "0.0.0.0"
  }
}

filter {
  if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
    date {
      match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }

  if [type] == "esx_syslog" {
    grok {
      break_on_match => true
      match => [
                 "message", "<%{POSINT:syslog_pri}>%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:hostname} %{SYSLOGPROG:message_program}: (?<body_type_1>(?<message_body>(?<message_system_info>(?:\[%{DATA:message_thread_id} %{DATA:syslog_level} \'%{DATA:message_service}\'\ ?%{DATA:message_opID}])) \[%{DATA:message_service_info}]\ (?<message_syslog>(%{GREEDYDATA}))))",
                 "message", "<%{POSINT:syslog_pri}>%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:hostname} %{SYSLOGPROG:message_program}: (?<body_type_2>(?<message_body>(?<message_system_info>(?:\[%{DATA:message_thread_id} %{DATA:syslog_level} \'%{DATA:message_service}\'\ ?%{DATA:message_opID}])) (?<message_syslog>(%{GREEDYDATA}))))",
                 "message", "<%{POSINT:syslog_pri}>%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:hostname} %{SYSLOGPROG:message_program}: (?<body_type_3>(?<message_body>%{GREEDYDATA:message_syslog}))",
                 "message", "<%{POSINT:syslog_pri}>.*?[\s\r\t](?<hostname>[a-zA-Z0-9\-_]+[.][a-zA-Z0-9\-_\.]+)[\s].*?(?<message_program>[a-zA-Z0-9\-\[\]_]{3,})[:][\s](?<body_type_6>(?<message_body>(?<message_syslog>.*)))",
                 "message", "(?<body_type_7>(?<message_body>(?<message_debug>.*)))"
               ]
         }
  }

  if [type] == "beats" {
     grok {
         match => { "message" => ["%{IPORHOST:[nginx][access][remote_ip]} - %{DATA:[nginx][access][user_name]} \[%{HTTPDATE:[nginx][access][time]}\] \"%{WORD:[nginx][access][method]} %{DATA:[nginx][access][url]} HTTP/%{NUMBER:[nginx][access][http_version]}\" %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]} \"%{DATA:[nginx][access][referrer]}\" \"%{DATA:[nginx][access][agent]}\""] }
      remove_field => "message"
     }
     mutate {
        rename => { "@timestamp" => "read_timestamp" }
     }
     date {
        match => [ "[nginx][access][time]", "dd/MMM/YYYY:H:m:s Z" ]
        remove_field => "[nginx][access][time]"
     }
     useragent {
        source => "[nginx][access][agent]"
        target => "[nginx][access][user_agent]"
        remove_field => "[nginx][access][agent]"
     }
     geoip {
        source => "[nginx][access][remote_ip]"
        target => "[nginx][access][geoip]"
     }
  }
}

output {
  if [type] == "syslog" {
    elasticsearch {
      index => "logstash-switch-syslog-%{+YYYY.MM.dd}"
      hosts => ["127.0.0.1:9200"]
#      document_id => "[@metadata][fingerprint]"
    }
  } else if [type] == "esx_syslog" {
    elasticsearch {
      index => "logstash-esx-syslog-%{+YYYY.MM.dd}"
      hosts => ["127.0.0.1:9200"]
#      document_id => "[@metadata][fingerprint]"
    }
  } else if [type] == "asupdata-internal" or [type] == "asupdata-internal-syslog"{
    elasticsearch {
      index => "logstash-asupdata-internal-%{+YYYY.MM.dd}"
      hosts => ["127.0.0.1:9200"]
#      document_id => "[@metadata][fingerprint]"
      document_id => "%{fingerprint}"
    }
    stdout { codec => rubydebug }
  }
  #stdout { codec => rubydebug }
}
